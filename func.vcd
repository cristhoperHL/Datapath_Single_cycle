$date
	Sun Mar 29 10:14:11 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module datapath $end
$var wire 1 ! zero $end
$var wire 5 " write_reg [4:0] $end
$var wire 32 # sign_extend_out [31:0] $end
$var wire 32 $ read_data2 [31:0] $end
$var wire 32 % read_data1 [31:0] $end
$var wire 32 & pc [31:0] $end
$var wire 1 ' out_and $end
$var wire 1 ( jump $end
$var wire 32 ) instruction [31:0] $end
$var wire 32 * data_2_out [31:0] $end
$var wire 32 + d [31:0] $end
$var wire 6 , alu_control_out [5:0] $end
$var wire 1 - RegWrite $end
$var wire 1 . RegDst $end
$var wire 1 / MemtoReg $end
$var wire 1 0 MemWrite $end
$var wire 1 1 MemRead $end
$var wire 1 2 Branch $end
$var wire 32 3 ALU_result [31:0] $end
$var wire 1 4 ALUSrc $end
$var wire 6 5 ALUOP [5:0] $end
$var reg 1 6 clk $end
$var reg 1 7 reset $end
$scope module AC $end
$var wire 6 8 func [5:0] $end
$var wire 6 9 ALUOP [5:0] $end
$var reg 6 : alu_control_out [5:0] $end
$upscope $end
$scope module APC $end
$var wire 32 ; pc [31:0] $end
$var reg 32 < pc_end [31:0] $end
$upscope $end
$scope module Br_a $end
$var wire 1 ' out $end
$var wire 1 2 b $end
$var wire 1 ! a $end
$upscope $end
$scope module CU $end
$var wire 6 = instruction [5:0] $end
$var reg 6 > ALUOP [5:0] $end
$var reg 1 4 ALUSrc $end
$var reg 1 2 Branch $end
$var reg 1 1 MemRead $end
$var reg 1 0 MemWrite $end
$var reg 1 / MemtoReg $end
$var reg 1 . RegDst $end
$var reg 1 - RegWrite $end
$var reg 1 ( jump $end
$upscope $end
$scope module IM $end
$var wire 32 ? pc [31:0] $end
$var reg 32 @ out [31:0] $end
$upscope $end
$scope module PC $end
$var wire 1 6 clk $end
$var wire 32 A d [31:0] $end
$var wire 1 7 reset $end
$var reg 32 B q [31:0] $end
$upscope $end
$scope module RF $end
$var wire 1 - RegWrite $end
$var wire 1 6 clk $end
$var wire 32 C read_data1 [31:0] $end
$var wire 32 D read_data2 [31:0] $end
$var wire 5 E read_reg1 [4:0] $end
$var wire 5 F read_reg2 [4:0] $end
$var wire 5 G write_reg [4:0] $end
$var wire 32 H write_data [31:0] $end
$upscope $end
$scope module SE $end
$var wire 16 I instruction_in [15:0] $end
$var wire 32 J instruction_out [31:0] $end
$upscope $end
$scope module alu $end
$var wire 6 K alu_control_out [5:0] $end
$var wire 32 L read_data1 [31:0] $end
$var wire 32 M read_data2 [31:0] $end
$var reg 32 N ALU_result [31:0] $end
$var reg 1 ! zero $end
$upscope $end
$scope module alu_mux $end
$var wire 32 O a [31:0] $end
$var wire 32 P b [31:0] $end
$var wire 1 4 sel $end
$var wire 32 Q y [31:0] $end
$upscope $end
$scope module rgm2_1 $end
$var wire 5 R a [4:0] $end
$var wire 5 S b [4:0] $end
$var wire 1 . sel $end
$var reg 5 T y [4:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 T
b0 S
b1 R
b10 Q
b0 P
b10 O
b11 N
b10 M
b1 L
b0 K
b0 J
b0 I
b11 H
b0 G
b1 F
b0 E
b10 D
b1 C
b0 B
b100 A
b10000000000000000 @
b0 ?
b111111 >
b0 =
b100 <
b0 ;
b0 :
b111111 9
b0 8
17
16
b111111 5
04
b11 3
02
01
00
0/
0.
1-
b0 ,
b100 +
b10 *
b10000000000000000 )
0(
0'
b0 &
b1 %
b10 $
b0 #
b0 "
0!
$end
#1
07
06
#2
b1 ,
b1 :
b1 K
b1 "
b1 G
b1 T
b100000000001 #
b100000000001 J
b100000000001 P
b100000000001 I
b1 8
b1 S
b10000100000000001 )
b10000100000000001 @
b1000 +
b1000 <
b1000 A
b1 3
b1 H
b1 N
b100 &
b100 ;
b100 ?
b100 B
b11 %
b11 C
b11 L
16
#3
06
#4
b10 ,
b10 :
b10 K
b10 "
b10 G
b10 T
b1000000000010 #
b1000000000010 J
b1000000000010 P
b1000000000010 I
b10 8
b10 F
b1 %
b1 C
b1 L
b1 E
b10 S
b10 R
b1000100001000000000010 )
b1000100001000000000010 @
b1 3
b1 H
b1 N
b1100 +
b1100 <
b1100 A
b11 *
b11 M
b11 Q
b1000 &
b1000 ;
b1000 ?
b1000 B
b11 $
b11 D
b11 O
16
#5
06
#6
b11111111111111111111111111111010 3
b11111111111111111111111111111010 H
b11111111111111111111111111111010 N
b11 ,
b11 :
b11 K
b11 "
b11 G
b11 T
b1100000000011 #
b1100000000011 J
b1100000000011 P
b1100000000011 I
b11 8
b11 F
b10 E
b11 S
b11 R
b10000110001100000000011 )
b10000110001100000000011 @
b10000 +
b10000 <
b10000 A
b100 *
b100 M
b100 Q
b1100 &
b1100 ;
b1100 ?
b1100 B
b100 $
b100 D
b100 O
16
#7
06
#8
b100 ,
b100 :
b100 K
b100 "
b100 G
b100 T
b10000000000100 #
b10000000000100 J
b10000000000100 P
b10000000000100 I
b100 8
b100 F
b11111111111111111111111111111010 %
b11111111111111111111111111111010 C
b11111111111111111111111111111010 L
b11 E
b100 S
b100 R
b11001000010000000000100 )
b11001000010000000000100 @
b11111111111111111111111111111111 3
b11111111111111111111111111111111 H
b11111111111111111111111111111111 N
b10100 +
b10100 <
b10100 A
b101 *
b101 M
b101 Q
b10000 &
b10000 ;
b10000 ?
b10000 B
b101 $
b101 D
b101 O
16
#9
06
#10
b0 3
b0 H
b0 N
b101 ,
b101 :
b101 K
b101 "
b101 G
b101 T
b10100000000101 #
b10100000000101 J
b10100000000101 P
b10100000000101 I
b101 8
b101 F
b11111111111111111111111111111111 %
b11111111111111111111111111111111 C
b11111111111111111111111111111111 L
b100 E
b101 S
b101 R
b100001010010100000000101 )
b100001010010100000000101 @
b11000 +
b11000 <
b11000 A
b110 *
b110 M
b110 Q
b10100 &
b10100 ;
b10100 ?
b10100 B
b110 $
b110 D
b110 O
16
#11
06
#12
14
b110 5
b110 9
b110 >
1.
b1010 3
b1010 H
b1010 N
b110 ,
b110 :
b110 K
b0 "
b0 G
b0 T
b111 #
b111 J
b111 P
b111 I
b111 8
b0 F
b11 %
b11 C
b11 L
b0 E
b0 S
b0 R
b110 =
b11000000000000000000000000111 )
b11000000000000000000000000111 @
b11100 +
b11100 <
b11100 A
b111 *
b111 M
b111 Q
b11000 &
b11000 ;
b11000 ?
b11000 B
b11 $
b11 D
b11 O
16
#13
06
#14
b111 ,
b111 :
b111 K
b111 5
b111 9
b111 >
b101 *
b101 M
b101 Q
b1 "
b1 G
b1 T
b101 #
b101 J
b101 P
b101 I
b101 8
b1 F
b1 R
b111 =
b11100000000010000000000000101 )
b11100000000010000000000000101 @
b100000 +
b100000 <
b100000 A
b0 3
b0 H
b0 N
b11100 &
b11100 ;
b11100 ?
b11100 B
b1010 %
b1010 C
b1010 L
b1 $
b1 D
b1 O
16
#15
06
#16
b11111111111111111111111111111101 3
b11111111111111111111111111111101 H
b11111111111111111111111111111101 N
b1000 ,
b1000 :
b1000 K
b1000 5
b1000 9
b1000 >
b11 *
b11 M
b11 Q
b10 "
b10 G
b10 T
b11 #
b11 J
b11 P
b11 I
b11 8
b10 F
b0 %
b0 C
b0 L
b1 E
b10 R
b1000 =
b100000001000100000000000000011 )
b100000001000100000000000000011 @
b100100 +
b100100 <
b100100 A
b100000 &
b100000 ;
b100000 ?
b100000 B
b1 $
b1 D
b1 O
16
#17
06
#18
b1001 ,
b1001 :
b1001 K
b1001 5
b1001 9
b1001 >
b1000 *
b1000 M
b1000 Q
b11111111111111111111111111111101 3
b11111111111111111111111111111101 H
b11111111111111111111111111111101 N
b11 "
b11 G
b11 T
b1000 #
b1000 J
b1000 P
b1000 I
b1000 8
b11 F
b11111111111111111111111111111101 %
b11111111111111111111111111111101 C
b11111111111111111111111111111101 L
b10 E
b11 R
b1001 =
b100100010000110000000000001000 )
b100100010000110000000000001000 @
b101000 +
b101000 <
b101000 A
b100100 &
b100100 ;
b100100 ?
b100100 B
b11111111111111111111111111111010 $
b11111111111111111111111111111010 D
b11111111111111111111111111111010 O
16
#19
06
#20
b0 3
b0 H
b0 N
b1101 ,
b1101 :
b1101 K
b1101 5
b1101 9
b1101 >
b101 *
b101 M
b101 Q
b100 "
b100 G
b100 T
b101 #
b101 J
b101 P
b101 I
b101 8
b100 F
b11 E
b100 R
b1101 =
b110100011001000000000000000101 )
b110100011001000000000000000101 @
b101100 +
b101100 <
b101100 A
b101000 &
b101000 ;
b101000 ?
b101000 B
b11111111111111111111111111111111 $
b11111111111111111111111111111111 D
b11111111111111111111111111111111 O
16
#21
06
