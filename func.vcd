$date
	Sun Mar 29 12:41:58 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module datapath $end
$var wire 1 ! zero $end
$var wire 5 " write_reg [4:0] $end
$var wire 32 # sign_extend_out [31:0] $end
$var wire 32 $ shift_branch_out [31:0] $end
$var wire 32 % read_data2 [31:0] $end
$var wire 32 & read_data1 [31:0] $end
$var wire 32 ' pc [31:0] $end
$var wire 1 ( out_and $end
$var wire 32 ) mux_branch_out [31:0] $end
$var wire 1 * jump $end
$var wire 32 + instruction [31:0] $end
$var wire 32 , data_2_out [31:0] $end
$var wire 32 - d [31:0] $end
$var wire 6 . alu_control_out [5:0] $end
$var wire 32 / adder_branch_result [31:0] $end
$var wire 1 0 RegWrite $end
$var wire 1 1 RegDst $end
$var wire 1 2 MemtoReg $end
$var wire 1 3 MemWrite $end
$var wire 1 4 MemRead $end
$var wire 1 5 Branch $end
$var wire 32 6 ALU_result [31:0] $end
$var wire 2 7 ALUSrc [1:0] $end
$var wire 6 8 ALUOP [5:0] $end
$var reg 1 9 clk $end
$var reg 1 : reset $end
$scope module AC $end
$var wire 6 ; func [5:0] $end
$var wire 6 < ALUOP [5:0] $end
$var reg 6 = alu_control_out [5:0] $end
$upscope $end
$scope module APC $end
$var wire 32 > pc [31:0] $end
$var reg 32 ? pc_end [31:0] $end
$upscope $end
$scope module Br_a $end
$var wire 1 ( out $end
$var wire 1 5 b $end
$var wire 1 ! a $end
$upscope $end
$scope module CU $end
$var wire 6 @ instruction [5:0] $end
$var reg 6 A ALUOP [5:0] $end
$var reg 2 B ALUSrc [1:0] $end
$var reg 1 5 Branch $end
$var reg 1 4 MemRead $end
$var reg 1 3 MemWrite $end
$var reg 1 2 MemtoReg $end
$var reg 1 1 RegDst $end
$var reg 1 0 RegWrite $end
$var reg 1 * jump $end
$upscope $end
$scope module IM $end
$var wire 32 C pc [31:0] $end
$var reg 32 D out [31:0] $end
$upscope $end
$scope module PC $end
$var wire 1 9 clk $end
$var wire 1 : reset $end
$var wire 32 E d [31:0] $end
$var reg 32 F q [31:0] $end
$upscope $end
$scope module RF $end
$var wire 1 0 RegWrite $end
$var wire 1 9 clk $end
$var wire 32 G read_data1 [31:0] $end
$var wire 32 H read_data2 [31:0] $end
$var wire 5 I read_reg1 [4:0] $end
$var wire 5 J read_reg2 [4:0] $end
$var wire 5 K write_reg [4:0] $end
$var wire 32 L write_data [31:0] $end
$upscope $end
$scope module SE $end
$var wire 16 M instruction_in [15:0] $end
$var wire 32 N instruction_out [31:0] $end
$upscope $end
$scope module SL2 $end
$var wire 32 O inmediate [31:0] $end
$var wire 32 P out [31:0] $end
$upscope $end
$scope module add_b $end
$var wire 32 Q a [31:0] $end
$var wire 32 R b [31:0] $end
$var wire 32 S out [31:0] $end
$upscope $end
$scope module alu $end
$var wire 6 T alu_control_out [5:0] $end
$var wire 32 U read_data1 [31:0] $end
$var wire 32 V read_data2 [31:0] $end
$var reg 32 W ALU_result [31:0] $end
$var reg 1 ! zero $end
$upscope $end
$scope module alu_mux $end
$var wire 32 X a [31:0] $end
$var wire 32 Y b [31:0] $end
$var wire 2 Z sel [1:0] $end
$var reg 32 [ y [31:0] $end
$upscope $end
$scope module m_branch $end
$var wire 32 \ a [31:0] $end
$var wire 32 ] b [31:0] $end
$var wire 1 ( sel $end
$var wire 32 ^ out [31:0] $end
$upscope $end
$scope module rgm2_1 $end
$var wire 5 _ a [4:0] $end
$var wire 5 ` b [4:0] $end
$var wire 1 1 sel $end
$var reg 5 a y [4:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 a
b0 `
b0 _
b1100 ^
b100 ]
b1100 \
b1 [
b10 Z
b10 Y
b1 X
b0 W
b1 V
b1 U
b1010 T
b1100 S
b1000 R
b100 Q
b1000 P
b10 O
b10 N
b10 M
b0 L
b0 K
b0 J
b0 I
b1 H
b1 G
b0 F
b1100 E
b101000000000000000000000000010 D
b0 C
b10 B
b1010 A
b1010 @
b100 ?
b0 >
b1010 =
b1010 <
b10 ;
1:
19
b1010 8
b10 7
b0 6
15
04
03
02
11
00
b1100 /
b1010 .
b100 -
b1 ,
b101000000000000000000000000010 +
0*
b1100 )
1(
b0 '
b1 &
b1 %
b1000 $
b10 #
b0 "
1!
$end
#1
0:
09
#2
b11111111111111111111111111111000 6
b11111111111111111111111111111000 L
b11111111111111111111111111111000 W
b11 .
b11 =
b11 T
10
b0 7
b0 B
b0 Z
b111111 8
b111111 <
b111111 A
05
01
0(
b110000000001100 $
b110000000001100 P
b110000000001100 R
b100 ,
b100 V
b100 [
0!
b11 "
b11 K
b11 a
b1100000000011 #
b1100000000011 N
b1100000000011 O
b1100000000011 Y
b1100000000011 M
b11 ;
b100 %
b100 H
b100 X
b11 J
b11 &
b11 G
b11 U
b10 I
b11 `
b11 _
b0 @
b10000110001100000000011 +
b10000110001100000000011 D
b10000 )
b10000 E
b10000 ^
b110000000011100 /
b110000000011100 S
b110000000011100 \
b10000 -
b10000 ?
b10000 Q
b10000 ]
b1100 '
b1100 >
b1100 C
b1100 F
19
#3
09
#4
b1000000000010000 $
b1000000000010000 P
b1000000000010000 R
b100 .
b100 =
b100 T
b100 "
b100 K
b100 a
b10000000000100 #
b10000000000100 N
b10000000000100 O
b10000000000100 Y
b10000000000100 M
b100 ;
b100 J
b11111111111111111111111111111000 &
b11111111111111111111111111111000 G
b11111111111111111111111111111000 U
b11 I
b100 `
b100 _
b11001000010000000000100 +
b11001000010000000000100 D
b10100 )
b10100 E
b10100 ^
b11111111111111111111111111111101 6
b11111111111111111111111111111101 L
b11111111111111111111111111111101 W
b1000000000100100 /
b1000000000100100 S
b1000000000100100 \
b10100 -
b10100 ?
b10100 Q
b10100 ]
b101 ,
b101 V
b101 [
b10000 '
b10000 >
b10000 C
b10000 F
b101 %
b101 H
b101 X
19
#5
09
#6
b0 6
b0 L
b0 W
b1010000000010100 $
b1010000000010100 P
b1010000000010100 R
b101 .
b101 =
b101 T
b101 "
b101 K
b101 a
b10100000000101 #
b10100000000101 N
b10100000000101 O
b10100000000101 Y
b10100000000101 M
b101 ;
b101 J
b11111111111111111111111111111101 &
b11111111111111111111111111111101 G
b11111111111111111111111111111101 U
b100 I
b101 `
b101 _
b100001010010100000000101 +
b100001010010100000000101 D
b11000 )
b11000 E
b11000 ^
b1010000000101100 /
b1010000000101100 S
b1010000000101100 \
b11000 -
b11000 ?
b11000 Q
b11000 ]
b110 ,
b110 V
b110 [
b10100 '
b10100 >
b10100 C
b10100 F
b110 %
b110 H
b110 X
19
#7
09
#8
b1 7
b1 B
b1 Z
b110 8
b110 <
b110 A
11
b1000 6
b1000 L
b1000 W
b11100 $
b11100 P
b11100 R
b110 .
b110 =
b110 T
b0 "
b0 K
b0 a
b111 #
b111 N
b111 O
b111 Y
b111 M
b111 ;
b0 J
b1 &
b1 G
b1 U
b0 I
b0 `
b0 _
b110 @
b11000000000000000000000000111 +
b11000000000000000000000000111 D
b11100 )
b11100 E
b11100 ^
b111000 /
b111000 S
b111000 \
b11100 -
b11100 ?
b11100 Q
b11100 ]
b111 ,
b111 V
b111 [
b11000 '
b11000 >
b11000 C
b11000 F
b1 %
b1 H
b1 X
19
#9
09
#10
b111 .
b111 =
b111 T
b111 8
b111 <
b111 A
b10100 $
b10100 P
b10100 R
b101 ,
b101 V
b101 [
b1 "
b1 K
b1 a
b101 #
b101 N
b101 O
b101 Y
b101 M
b101 ;
b1 J
b1 _
b111 @
b11100000000010000000000000101 +
b11100000000010000000000000101 D
b100000 )
b100000 E
b100000 ^
b110100 /
b110100 S
b110100 \
b100000 -
b100000 ?
b100000 Q
b100000 ]
b0 6
b0 L
b0 W
b11100 '
b11100 >
b11100 C
b11100 F
b1000 &
b1000 G
b1000 U
b10 %
b10 H
b10 X
19
#11
09
#12
b11111111111111111111111111111101 6
b11111111111111111111111111111101 L
b11111111111111111111111111111101 W
b1000 .
b1000 =
b1000 T
b1000 8
b1000 <
b1000 A
b1100 $
b1100 P
b1100 R
b11 ,
b11 V
b11 [
b10 "
b10 K
b10 a
b11 #
b11 N
b11 O
b11 Y
b11 M
b11 ;
b10 J
b0 &
b0 G
b0 U
b1 I
b10 _
b1000 @
b100000001000100000000000000011 +
b100000001000100000000000000011 D
b100100 )
b100100 E
b100100 ^
b110000 /
b110000 S
b110000 \
b100100 -
b100100 ?
b100100 Q
b100100 ]
b100000 '
b100000 >
b100000 C
b100000 F
b11 %
b11 H
b11 X
19
#13
09
#14
b1001 .
b1001 =
b1001 T
b1001 8
b1001 <
b1001 A
b100000 $
b100000 P
b100000 R
b1000 ,
b1000 V
b1000 [
b11111111111111111111111111111101 6
b11111111111111111111111111111101 L
b11111111111111111111111111111101 W
b11 "
b11 K
b11 a
b1000 #
b1000 N
b1000 O
b1000 Y
b1000 M
b1000 ;
b11 J
b11111111111111111111111111111101 &
b11111111111111111111111111111101 G
b11111111111111111111111111111101 U
b10 I
b11 _
b1001 @
b100100010000110000000000001000 +
b100100010000110000000000001000 D
b101000 )
b101000 E
b101000 ^
b1001000 /
b1001000 S
b1001000 \
b101000 -
b101000 ?
b101000 Q
b101000 ]
b100100 '
b100100 >
b100100 C
b100100 F
b11111111111111111111111111111000 %
b11111111111111111111111111111000 H
b11111111111111111111111111111000 X
19
#15
09
#16
b0 6
b0 L
b0 W
b1101 .
b1101 =
b1101 T
b1101 8
b1101 <
b1101 A
b10100 $
b10100 P
b10100 R
b101 ,
b101 V
b101 [
b100 "
b100 K
b100 a
b101 #
b101 N
b101 O
b101 Y
b101 M
b101 ;
b100 J
b11 I
b100 _
b1101 @
b110100011001000000000000000101 +
b110100011001000000000000000101 D
b101100 )
b101100 E
b101100 ^
b1000000 /
b1000000 S
b1000000 \
b101100 -
b101100 ?
b101100 Q
b101100 ]
b101000 '
b101000 >
b101000 C
b101000 F
b11111111111111111111111111111101 %
b11111111111111111111111111111101 H
b11111111111111111111111111111101 X
19
#17
09
#18
b1000 .
b1000 =
b1000 T
b0 7
b0 B
b0 Z
b111111 8
b111111 <
b111111 A
01
b100000 $
b100000 P
b100000 R
b1000 ,
b1000 V
b1000 [
b0 "
b0 K
b0 a
b1000 #
b1000 N
b1000 O
b1000 Y
b1000 M
b1000 ;
b0 J
b1000 &
b1000 G
b1000 U
b0 I
b0 _
b0 @
b1000 +
b1000 D
b110000 )
b110000 E
b110000 ^
b1010000 /
b1010000 S
b1010000 \
b110000 -
b110000 ?
b110000 Q
b110000 ]
b101100 '
b101100 >
b101100 C
b101100 F
b1000 %
b1000 H
b1000 X
19
#19
09
#20
b1000 $
b1000 P
b1000 R
b10 .
b10 =
b10 T
b10 #
b10 N
b10 O
b10 Y
b10 M
b10 ;
b10 +
b10 D
b110100 )
b110100 E
b110100 ^
b111100 /
b111100 S
b111100 \
b110100 -
b110100 ?
b110100 Q
b110100 ]
b0 ,
b0 V
b0 [
b110000 '
b110000 >
b110000 C
b110000 F
b0 &
b0 G
b0 U
b0 %
b0 H
b0 X
19
#21
09
