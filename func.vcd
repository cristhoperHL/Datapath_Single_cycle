$date
	Sun Mar 29 12:15:12 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module datapath $end
$var wire 1 ! zero $end
$var wire 5 " write_reg [4:0] $end
$var wire 32 # sign_extend_out [31:0] $end
$var wire 32 $ shift_branch_out [31:0] $end
$var wire 32 % read_data2 [31:0] $end
$var wire 32 & read_data1 [31:0] $end
$var wire 32 ' pc [31:0] $end
$var wire 1 ( out_and $end
$var wire 32 ) mux_branch_out [31:0] $end
$var wire 1 * jump $end
$var wire 32 + instruction [31:0] $end
$var wire 32 , data_2_out [31:0] $end
$var wire 32 - d [31:0] $end
$var wire 6 . alu_control_out [5:0] $end
$var wire 32 / adder_branch_result [31:0] $end
$var wire 1 0 RegWrite $end
$var wire 1 1 RegDst $end
$var wire 1 2 MemtoReg $end
$var wire 1 3 MemWrite $end
$var wire 1 4 MemRead $end
$var wire 1 5 Branch $end
$var wire 32 6 ALU_result [31:0] $end
$var wire 1 7 ALUSrc $end
$var wire 6 8 ALUOP [5:0] $end
$var reg 1 9 clk $end
$var reg 1 : reset $end
$scope module AC $end
$var wire 6 ; func [5:0] $end
$var wire 6 < ALUOP [5:0] $end
$var reg 6 = alu_control_out [5:0] $end
$upscope $end
$scope module APC $end
$var wire 32 > pc [31:0] $end
$var reg 32 ? pc_end [31:0] $end
$upscope $end
$scope module Br_a $end
$var wire 1 ( out $end
$var wire 1 5 b $end
$var wire 1 ! a $end
$upscope $end
$scope module CU $end
$var wire 6 @ instruction [5:0] $end
$var reg 6 A ALUOP [5:0] $end
$var reg 1 7 ALUSrc $end
$var reg 1 5 Branch $end
$var reg 1 4 MemRead $end
$var reg 1 3 MemWrite $end
$var reg 1 2 MemtoReg $end
$var reg 1 1 RegDst $end
$var reg 1 0 RegWrite $end
$var reg 1 * jump $end
$upscope $end
$scope module IM $end
$var wire 32 B pc [31:0] $end
$var reg 32 C out [31:0] $end
$upscope $end
$scope module PC $end
$var wire 1 9 clk $end
$var wire 1 : reset $end
$var wire 32 D d [31:0] $end
$var reg 32 E q [31:0] $end
$upscope $end
$scope module RF $end
$var wire 1 0 RegWrite $end
$var wire 1 9 clk $end
$var wire 32 F read_data1 [31:0] $end
$var wire 32 G read_data2 [31:0] $end
$var wire 5 H read_reg1 [4:0] $end
$var wire 5 I read_reg2 [4:0] $end
$var wire 5 J write_reg [4:0] $end
$var wire 32 K write_data [31:0] $end
$upscope $end
$scope module SE $end
$var wire 16 L instruction_in [15:0] $end
$var wire 32 M instruction_out [31:0] $end
$upscope $end
$scope module SL2 $end
$var wire 32 N inmediate [31:0] $end
$var wire 32 O out [31:0] $end
$upscope $end
$scope module add_b $end
$var wire 32 P a [31:0] $end
$var wire 32 Q b [31:0] $end
$var wire 32 R out [31:0] $end
$upscope $end
$scope module alu $end
$var wire 6 S alu_control_out [5:0] $end
$var wire 32 T read_data1 [31:0] $end
$var wire 32 U read_data2 [31:0] $end
$var reg 32 V ALU_result [31:0] $end
$var reg 1 ! zero $end
$upscope $end
$scope module alu_mux $end
$var wire 32 W a [31:0] $end
$var wire 32 X b [31:0] $end
$var wire 1 7 sel $end
$var wire 32 Y y [31:0] $end
$upscope $end
$scope module m_branch $end
$var wire 32 Z a [31:0] $end
$var wire 32 [ b [31:0] $end
$var wire 1 ( sel $end
$var wire 32 \ out [31:0] $end
$upscope $end
$scope module rgm2_1 $end
$var wire 5 ] a [4:0] $end
$var wire 5 ^ b [4:0] $end
$var wire 1 1 sel $end
$var reg 5 _ y [4:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 _
b0 ^
b1 ]
b100 \
b100 [
b100 Z
b10 Y
b0 X
b10 W
b11 V
b10 U
b1 T
b0 S
b100 R
b0 Q
b100 P
b0 O
b0 N
b0 M
b0 L
b11 K
b0 J
b1 I
b0 H
b10 G
b1 F
b0 E
b100 D
b10000000000000000 C
b0 B
b111111 A
b0 @
b100 ?
b0 >
b0 =
b111111 <
b0 ;
1:
19
b111111 8
07
b11 6
05
04
03
02
01
10
b100 /
b0 .
b100 -
b10 ,
b10000000000000000 +
0*
b100 )
0(
b0 '
b1 &
b10 %
b0 $
b0 #
b0 "
0!
$end
#1
0:
09
#2
b10000000000100 $
b10000000000100 O
b10000000000100 Q
b1 .
b1 =
b1 S
b1 "
b1 J
b1 _
b100000000001 #
b100000000001 M
b100000000001 N
b100000000001 X
b100000000001 L
b1 ;
b1 ^
b10000100000000001 +
b10000100000000001 C
b1000 )
b1000 D
b1000 \
b10000000001100 /
b10000000001100 R
b10000000001100 Z
b1000 -
b1000 ?
b1000 P
b1000 [
b1 6
b1 K
b1 V
b100 '
b100 >
b100 B
b100 E
b11 &
b11 F
b11 T
19
#3
09
#4
b100000000001000 $
b100000000001000 O
b100000000001000 Q
b10 .
b10 =
b10 S
b10 "
b10 J
b10 _
b1000000000010 #
b1000000000010 M
b1000000000010 N
b1000000000010 X
b1000000000010 L
b10 ;
b10 I
b1 &
b1 F
b1 T
b1 H
b10 ^
b10 ]
b1000100001000000000010 +
b1000100001000000000010 C
b1100 )
b1100 D
b1100 \
b1 6
b1 K
b1 V
b100000000010100 /
b100000000010100 R
b100000000010100 Z
b1100 -
b1100 ?
b1100 P
b1100 [
b11 ,
b11 U
b11 Y
b1000 '
b1000 >
b1000 B
b1000 E
b11 %
b11 G
b11 W
19
#5
09
#6
b11111111111111111111111111111010 6
b11111111111111111111111111111010 K
b11111111111111111111111111111010 V
b110000000001100 $
b110000000001100 O
b110000000001100 Q
b11 .
b11 =
b11 S
b11 "
b11 J
b11 _
b1100000000011 #
b1100000000011 M
b1100000000011 N
b1100000000011 X
b1100000000011 L
b11 ;
b11 I
b10 H
b11 ^
b11 ]
b10000110001100000000011 +
b10000110001100000000011 C
b10000 )
b10000 D
b10000 \
b110000000011100 /
b110000000011100 R
b110000000011100 Z
b10000 -
b10000 ?
b10000 P
b10000 [
b100 ,
b100 U
b100 Y
b1100 '
b1100 >
b1100 B
b1100 E
b100 %
b100 G
b100 W
19
#7
09
#8
b1000000000010000 $
b1000000000010000 O
b1000000000010000 Q
b100 .
b100 =
b100 S
b100 "
b100 J
b100 _
b10000000000100 #
b10000000000100 M
b10000000000100 N
b10000000000100 X
b10000000000100 L
b100 ;
b100 I
b11111111111111111111111111111010 &
b11111111111111111111111111111010 F
b11111111111111111111111111111010 T
b11 H
b100 ^
b100 ]
b11001000010000000000100 +
b11001000010000000000100 C
b10100 )
b10100 D
b10100 \
b11111111111111111111111111111111 6
b11111111111111111111111111111111 K
b11111111111111111111111111111111 V
b1000000000100100 /
b1000000000100100 R
b1000000000100100 Z
b10100 -
b10100 ?
b10100 P
b10100 [
b101 ,
b101 U
b101 Y
b10000 '
b10000 >
b10000 B
b10000 E
b101 %
b101 G
b101 W
19
#9
09
#10
b0 6
b0 K
b0 V
b1010000000010100 $
b1010000000010100 O
b1010000000010100 Q
b101 .
b101 =
b101 S
b101 "
b101 J
b101 _
b10100000000101 #
b10100000000101 M
b10100000000101 N
b10100000000101 X
b10100000000101 L
b101 ;
b101 I
b11111111111111111111111111111111 &
b11111111111111111111111111111111 F
b11111111111111111111111111111111 T
b100 H
b101 ^
b101 ]
b100001010010100000000101 +
b100001010010100000000101 C
b11000 )
b11000 D
b11000 \
b1010000000101100 /
b1010000000101100 R
b1010000000101100 Z
b11000 -
b11000 ?
b11000 P
b11000 [
b110 ,
b110 U
b110 Y
b10100 '
b10100 >
b10100 B
b10100 E
b110 %
b110 G
b110 W
19
#11
09
#12
17
b110 8
b110 <
b110 A
11
b1010 6
b1010 K
b1010 V
b11100 $
b11100 O
b11100 Q
b110 .
b110 =
b110 S
b0 "
b0 J
b0 _
b111 #
b111 M
b111 N
b111 X
b111 L
b111 ;
b0 I
b11 &
b11 F
b11 T
b0 H
b0 ^
b0 ]
b110 @
b11000000000000000000000000111 +
b11000000000000000000000000111 C
b11100 )
b11100 D
b11100 \
b111000 /
b111000 R
b111000 Z
b11100 -
b11100 ?
b11100 P
b11100 [
b111 ,
b111 U
b111 Y
b11000 '
b11000 >
b11000 B
b11000 E
b11 %
b11 G
b11 W
19
#13
09
#14
b111 .
b111 =
b111 S
b111 8
b111 <
b111 A
b10100 $
b10100 O
b10100 Q
b101 ,
b101 U
b101 Y
b1 "
b1 J
b1 _
b101 #
b101 M
b101 N
b101 X
b101 L
b101 ;
b1 I
b1 ]
b111 @
b11100000000010000000000000101 +
b11100000000010000000000000101 C
b100000 )
b100000 D
b100000 \
b110100 /
b110100 R
b110100 Z
b100000 -
b100000 ?
b100000 P
b100000 [
b0 6
b0 K
b0 V
b11100 '
b11100 >
b11100 B
b11100 E
b1010 &
b1010 F
b1010 T
b1 %
b1 G
b1 W
19
#15
09
#16
b11111111111111111111111111111101 6
b11111111111111111111111111111101 K
b11111111111111111111111111111101 V
b1000 .
b1000 =
b1000 S
b1000 8
b1000 <
b1000 A
b1100 $
b1100 O
b1100 Q
b11 ,
b11 U
b11 Y
b10 "
b10 J
b10 _
b11 #
b11 M
b11 N
b11 X
b11 L
b11 ;
b10 I
b0 &
b0 F
b0 T
b1 H
b10 ]
b1000 @
b100000001000100000000000000011 +
b100000001000100000000000000011 C
b100100 )
b100100 D
b100100 \
b110000 /
b110000 R
b110000 Z
b100100 -
b100100 ?
b100100 P
b100100 [
b100000 '
b100000 >
b100000 B
b100000 E
b1 %
b1 G
b1 W
19
#17
09
#18
b1001 .
b1001 =
b1001 S
b1001 8
b1001 <
b1001 A
b100000 $
b100000 O
b100000 Q
b1000 ,
b1000 U
b1000 Y
b11111111111111111111111111111101 6
b11111111111111111111111111111101 K
b11111111111111111111111111111101 V
b11 "
b11 J
b11 _
b1000 #
b1000 M
b1000 N
b1000 X
b1000 L
b1000 ;
b11 I
b11111111111111111111111111111101 &
b11111111111111111111111111111101 F
b11111111111111111111111111111101 T
b10 H
b11 ]
b1001 @
b100100010000110000000000001000 +
b100100010000110000000000001000 C
b101000 )
b101000 D
b101000 \
b1001000 /
b1001000 R
b1001000 Z
b101000 -
b101000 ?
b101000 P
b101000 [
b100100 '
b100100 >
b100100 B
b100100 E
b11111111111111111111111111111010 %
b11111111111111111111111111111010 G
b11111111111111111111111111111010 W
19
#19
09
#20
b0 6
b0 K
b0 V
b1101 .
b1101 =
b1101 S
b1101 8
b1101 <
b1101 A
b10100 $
b10100 O
b10100 Q
b101 ,
b101 U
b101 Y
b100 "
b100 J
b100 _
b101 #
b101 M
b101 N
b101 X
b101 L
b101 ;
b100 I
b11 H
b100 ]
b1101 @
b110100011001000000000000000101 +
b110100011001000000000000000101 C
b101100 )
b101100 D
b101100 \
b1000000 /
b1000000 R
b1000000 Z
b101100 -
b101100 ?
b101100 P
b101100 [
b101000 '
b101000 >
b101000 B
b101000 E
b11111111111111111111111111111111 %
b11111111111111111111111111111111 G
b11111111111111111111111111111111 W
19
#21
09
