$date
	Sun Mar 29 14:21:13 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module datapath $end
$var wire 1 ! zero $end
$var wire 5 " write_reg [4:0] $end
$var wire 32 # sign_extend_out [31:0] $end
$var wire 32 $ shift_branch_out [31:0] $end
$var wire 32 % read_data2 [31:0] $end
$var wire 32 & read_data1 [31:0] $end
$var wire 32 ' pc [31:0] $end
$var wire 1 ( out_and $end
$var wire 32 ) mux_pc_end [31:0] $end
$var wire 32 * mux_branch_out [31:0] $end
$var wire 32 + jump_sl_out [31:0] $end
$var wire 1 , jump $end
$var wire 32 - instruction [31:0] $end
$var wire 32 . data_2_out [31:0] $end
$var wire 32 / d [31:0] $end
$var wire 6 0 alu_control_out [5:0] $end
$var wire 32 1 adder_branch_result [31:0] $end
$var wire 1 2 RegWrite $end
$var wire 1 3 RegDst $end
$var wire 1 4 MemtoReg $end
$var wire 1 5 MemWrite $end
$var wire 1 6 MemRead $end
$var wire 1 7 Branch $end
$var wire 32 8 ALU_result [31:0] $end
$var wire 2 9 ALUSrc [1:0] $end
$var wire 6 : ALUOP [5:0] $end
$var reg 1 ; clk $end
$var reg 1 < reset $end
$scope module AC $end
$var wire 6 = func [5:0] $end
$var wire 6 > ALUOP [5:0] $end
$var reg 6 ? alu_control_out [5:0] $end
$upscope $end
$scope module APC $end
$var wire 32 @ pc [31:0] $end
$var reg 32 A pc_end [31:0] $end
$upscope $end
$scope module Br_a $end
$var wire 1 ( out $end
$var wire 1 7 b $end
$var wire 1 ! a $end
$upscope $end
$scope module CU $end
$var wire 6 B instruction [5:0] $end
$var reg 6 C ALUOP [5:0] $end
$var reg 2 D ALUSrc [1:0] $end
$var reg 1 7 Branch $end
$var reg 1 6 MemRead $end
$var reg 1 5 MemWrite $end
$var reg 1 4 MemtoReg $end
$var reg 1 3 RegDst $end
$var reg 1 2 RegWrite $end
$var reg 1 , jump $end
$upscope $end
$scope module IM $end
$var wire 32 E pc [31:0] $end
$var reg 32 F out [31:0] $end
$upscope $end
$scope module PC $end
$var wire 1 ; clk $end
$var wire 1 < reset $end
$var wire 32 G d [31:0] $end
$var reg 32 H q [31:0] $end
$upscope $end
$scope module RF $end
$var wire 1 2 RegWrite $end
$var wire 1 ; clk $end
$var wire 32 I read_data1 [31:0] $end
$var wire 32 J read_data2 [31:0] $end
$var wire 5 K read_reg1 [4:0] $end
$var wire 5 L read_reg2 [4:0] $end
$var wire 5 M write_reg [4:0] $end
$var wire 32 N write_data [31:0] $end
$upscope $end
$scope module SE $end
$var wire 16 O instruction_in [15:0] $end
$var wire 32 P instruction_out [31:0] $end
$upscope $end
$scope module SL2 $end
$var wire 32 Q inmediate [31:0] $end
$var wire 32 R out [31:0] $end
$upscope $end
$scope module add_b $end
$var wire 32 S a [31:0] $end
$var wire 32 T b [31:0] $end
$var wire 32 U out [31:0] $end
$upscope $end
$scope module alu $end
$var wire 6 V alu_control_out [5:0] $end
$var wire 32 W read_data1 [31:0] $end
$var wire 32 X read_data2 [31:0] $end
$var reg 32 Y ALU_result [31:0] $end
$var reg 1 ! zero $end
$upscope $end
$scope module alu_mux $end
$var wire 32 Z a [31:0] $end
$var wire 32 [ b [31:0] $end
$var wire 2 \ sel [1:0] $end
$var reg 32 ] y [31:0] $end
$upscope $end
$scope module j_sl $end
$var wire 26 ^ inst_jump [25:0] $end
$var wire 32 _ pc_4 [31:0] $end
$var wire 32 ` out [31:0] $end
$upscope $end
$scope module jump_branch $end
$var wire 32 a a [31:0] $end
$var wire 1 , sel $end
$var wire 32 b out [31:0] $end
$var wire 32 c b [31:0] $end
$upscope $end
$scope module m_branch $end
$var wire 32 d a [31:0] $end
$var wire 32 e b [31:0] $end
$var wire 1 ( sel $end
$var wire 32 f out [31:0] $end
$upscope $end
$scope module rgm2_1 $end
$var wire 5 g a [4:0] $end
$var wire 5 h b [4:0] $end
$var wire 1 3 sel $end
$var reg 5 i y [4:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 i
b0 h
b0 g
b100 f
b100 e
b10100 d
b100 c
b10000 b
b10000 a
b10000 `
b100 _
b100 ^
b1 ]
b0 \
b100 [
b1 Z
bx Y
b1 X
b1 W
b10101 V
b10100 U
b10000 T
b100 S
b10000 R
b100 Q
b100 P
b100 O
bx N
b0 M
b0 L
b0 K
b1 J
b1 I
b0 H
b10000 G
b1010100000000000000000000000100 F
b0 E
b0 D
b10101 C
b10101 B
b100 A
b0 @
b10101 ?
b10101 >
b100 =
1<
1;
b10101 :
b0 9
bx 8
07
06
05
04
13
02
b10100 1
b10101 0
b100 /
b1 .
b1010100000000000000000000000100 -
1,
b10000 +
b100 *
b10000 )
0(
b0 '
b1 &
b1 %
b10000 $
b100 #
b0 "
x!
$end
#1
0<
0;
#2
0!
b101 8
b101 N
b101 Y
b100 0
b100 ?
b100 V
12
b111111 :
b111111 >
b111111 C
0,
03
b1000000000010000 $
b1000000000010000 R
b1000000000010000 T
b101 .
b101 X
b101 ]
b100 "
b100 M
b100 i
b10100 )
b10100 G
b10100 b
b10000000000100 #
b10000000000100 P
b10000000000100 Q
b10000000000100 [
b10000000000100 O
b101 %
b101 J
b101 Z
b100 L
b100 &
b100 I
b100 W
b11 K
b100 h
b100 g
b1100100001000000000010000 +
b1100100001000000000010000 `
b1100100001000000000010000 a
b11001000010000000000100 ^
b0 B
b11001000010000000000100 -
b11001000010000000000100 F
b10100 *
b10100 c
b10100 f
b1000000000100100 1
b1000000000100100 U
b1000000000100100 d
b10100 /
b10100 A
b10100 S
b10100 _
b10100 e
b10000 '
b10000 @
b10000 E
b10000 H
1;
#3
0;
#4
b1 8
b1 N
b1 Y
b1010000000010100 $
b1010000000010100 R
b1010000000010100 T
b101 0
b101 ?
b101 V
b110 .
b110 X
b110 ]
b101 "
b101 M
b101 i
b10100000000101 #
b10100000000101 P
b10100000000101 Q
b10100000000101 [
b10100000000101 O
b101 =
b110 %
b110 J
b110 Z
b101 L
b101 &
b101 I
b101 W
b100 K
b101 h
b101 g
b10000101001010000000010100 +
b10000101001010000000010100 `
b10000101001010000000010100 a
b100001010010100000000101 ^
b100001010010100000000101 -
b100001010010100000000101 F
b11000 )
b11000 G
b11000 b
b11000 *
b11000 c
b11000 f
b1010000000101100 1
b1010000000101100 U
b1010000000101100 d
b11000 /
b11000 A
b11000 S
b11000 _
b11000 e
b10100 '
b10100 @
b10100 E
b10100 H
1;
#5
0;
#6
b1 9
b1 D
b1 \
b110 :
b110 >
b110 C
13
b11100 $
b11100 R
b11100 T
b110 0
b110 ?
b110 V
b0 "
b0 M
b0 i
b111 #
b111 P
b111 Q
b111 [
b111 O
b111 =
b0 L
b1 &
b1 I
b1 W
b0 K
b0 h
b0 g
b11100 +
b11100 `
b11100 a
b111 ^
b110 B
b11000000000000000000000000111 -
b11000000000000000000000000111 F
b11100 )
b11100 G
b11100 b
b11100 *
b11100 c
b11100 f
b1000 8
b1000 N
b1000 Y
b111000 1
b111000 U
b111000 d
b11100 /
b11100 A
b11100 S
b11100 _
b11100 e
b111 .
b111 X
b111 ]
b11000 '
b11000 @
b11000 E
b11000 H
b1 %
b1 J
b1 Z
1;
#7
0;
#8
b111 0
b111 ?
b111 V
b111 :
b111 >
b111 C
b10100 $
b10100 R
b10100 T
b101 .
b101 X
b101 ]
b1 "
b1 M
b1 i
b101 #
b101 P
b101 Q
b101 [
b101 O
b101 =
b1 L
b1 g
b1000000000000010100 +
b1000000000000010100 `
b1000000000000010100 a
b10000000000000101 ^
b111 B
b11100000000010000000000000101 -
b11100000000010000000000000101 F
b100000 )
b100000 G
b100000 b
b100000 *
b100000 c
b100000 f
b110100 1
b110100 U
b110100 d
b100000 /
b100000 A
b100000 S
b100000 _
b100000 e
b0 8
b0 N
b0 Y
b11100 '
b11100 @
b11100 E
b11100 H
b1000 &
b1000 I
b1000 W
b10 %
b10 J
b10 Z
1;
#9
0;
#10
b11111111111111111111111111111101 8
b11111111111111111111111111111101 N
b11111111111111111111111111111101 Y
b1000 0
b1000 ?
b1000 V
b1000 :
b1000 >
b1000 C
b1100 $
b1100 R
b1100 T
b11 .
b11 X
b11 ]
b10 "
b10 M
b10 i
b11 #
b11 P
b11 Q
b11 [
b11 O
b11 =
b10 L
b0 &
b0 I
b0 W
b1 K
b10 g
b100010000000000000001100 +
b100010000000000000001100 `
b100010000000000000001100 a
b1000100000000000000011 ^
b1000 B
b100000001000100000000000000011 -
b100000001000100000000000000011 F
b100100 )
b100100 G
b100100 b
b100100 *
b100100 c
b100100 f
b110000 1
b110000 U
b110000 d
b100100 /
b100100 A
b100100 S
b100100 _
b100100 e
b100000 '
b100000 @
b100000 E
b100000 H
b11 %
b11 J
b11 Z
1;
#11
0;
#12
b1001 0
b1001 ?
b1001 V
b1001 :
b1001 >
b1001 C
b100000 $
b100000 R
b100000 T
b1000 .
b1000 X
b1000 ]
b11111111111111111111111111111101 8
b11111111111111111111111111111101 N
b11111111111111111111111111111101 Y
b11 "
b11 M
b11 i
b1000 #
b1000 P
b1000 Q
b1000 [
b1000 O
b1000 =
b11 L
b11111111111111111111111111111101 &
b11111111111111111111111111111101 I
b11111111111111111111111111111101 W
b10 K
b11 g
b1000011000000000000100000 +
b1000011000000000000100000 `
b1000011000000000000100000 a
b10000110000000000001000 ^
b1001 B
b100100010000110000000000001000 -
b100100010000110000000000001000 F
b101000 )
b101000 G
b101000 b
b101000 *
b101000 c
b101000 f
b1001000 1
b1001000 U
b1001000 d
b101000 /
b101000 A
b101000 S
b101000 _
b101000 e
b100100 '
b100100 @
b100100 E
b100100 H
b100 %
b100 J
b100 Z
1;
#13
0;
#14
b0 8
b0 N
b0 Y
b1101 0
b1101 ?
b1101 V
b1101 :
b1101 >
b1101 C
b10100 $
b10100 R
b10100 T
b101 .
b101 X
b101 ]
b100 "
b100 M
b100 i
b101 #
b101 P
b101 Q
b101 [
b101 O
b101 =
b100 L
b11 K
b100 g
b1100100000000000000010100 +
b1100100000000000000010100 `
b1100100000000000000010100 a
b11001000000000000000101 ^
b1101 B
b110100011001000000000000000101 -
b110100011001000000000000000101 F
b101100 )
b101100 G
b101100 b
b101100 *
b101100 c
b101100 f
b1000000 1
b1000000 U
b1000000 d
b101100 /
b101100 A
b101100 S
b101100 _
b101100 e
b101000 '
b101000 @
b101000 E
b101000 H
b101 %
b101 J
b101 Z
1;
#15
0;
#16
b1000 0
b1000 ?
b1000 V
b0 9
b0 D
b0 \
b111111 :
b111111 >
b111111 C
03
b100000 $
b100000 R
b100000 T
b1000 .
b1000 X
b1000 ]
b0 "
b0 M
b0 i
b1000 #
b1000 P
b1000 Q
b1000 [
b1000 O
b1000 =
b0 L
b1000 &
b1000 I
b1000 W
b0 K
b0 g
b100000 +
b100000 `
b100000 a
b1000 ^
b0 B
b1000 -
b1000 F
b110000 )
b110000 G
b110000 b
b110000 *
b110000 c
b110000 f
b1010000 1
b1010000 U
b1010000 d
b110000 /
b110000 A
b110000 S
b110000 _
b110000 e
b101100 '
b101100 @
b101100 E
b101100 H
b1000 %
b1000 J
b1000 Z
1;
#17
0;
#18
b1000 $
b1000 R
b1000 T
b10 0
b10 ?
b10 V
b10 #
b10 P
b10 Q
b10 [
b10 O
b10 =
b1000 +
b1000 `
b1000 a
b10 ^
b10 -
b10 F
b110100 )
b110100 G
b110100 b
b110100 *
b110100 c
b110100 f
b111100 1
b111100 U
b111100 d
b110100 /
b110100 A
b110100 S
b110100 _
b110100 e
b0 .
b0 X
b0 ]
b110000 '
b110000 @
b110000 E
b110000 H
b0 &
b0 I
b0 W
b0 %
b0 J
b0 Z
1;
#19
0;
#20
b100000000 $
b100000000 R
b100000000 T
b0 0
b0 ?
b0 V
b1000000 #
b1000000 P
b1000000 Q
b1000000 [
b1000000 O
b0 =
b100000000 +
b100000000 `
b100000000 a
b1000000 ^
b1000000 -
b1000000 F
b111000 )
b111000 G
b111000 b
b111000 *
b111000 c
b111000 f
b100111000 1
b100111000 U
b100111000 d
b111000 /
b111000 A
b111000 S
b111000 _
b111000 e
b110100 '
b110100 @
b110100 E
b110100 H
1;
#21
0;
