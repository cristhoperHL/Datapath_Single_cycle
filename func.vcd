$date
	Tue Mar 31 20:07:18 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module datapath $end
$var wire 1 ! zero $end
$var wire 5 " write_reg [4:0] $end
$var wire 32 # sign_extend_out [31:0] $end
$var wire 32 $ shift_branch_out [31:0] $end
$var wire 32 % read_data2 [31:0] $end
$var wire 32 & read_data1 [31:0] $end
$var wire 32 ' pc [31:0] $end
$var wire 1 ( out_and $end
$var wire 32 ) mux_pc_end [31:0] $end
$var wire 32 * mux_branch_out [31:0] $end
$var wire 32 + jump_sl_out [31:0] $end
$var wire 1 , jump $end
$var wire 32 - instruction [31:0] $end
$var wire 32 . data_2_out [31:0] $end
$var wire 32 / d [31:0] $end
$var wire 6 0 alu_control_out [5:0] $end
$var wire 32 1 adder_branch_result [31:0] $end
$var wire 1 2 RegWrite $end
$var wire 1 3 RegDst $end
$var wire 1 4 MemtoReg $end
$var wire 2 5 MemWrite [1:0] $end
$var wire 2 6 MemRead [1:0] $end
$var wire 1 7 Branch $end
$var wire 32 8 ALU_result [31:0] $end
$var wire 2 9 ALUSrc [1:0] $end
$var wire 6 : ALUOP [5:0] $end
$var reg 1 ; clk $end
$var reg 1 < reset $end
$scope module AC $end
$var wire 6 = func [5:0] $end
$var wire 6 > ALUOP [5:0] $end
$var reg 6 ? alu_control_out [5:0] $end
$upscope $end
$scope module APC $end
$var wire 32 @ pc [31:0] $end
$var reg 32 A pc_end [31:0] $end
$upscope $end
$scope module Br_a $end
$var wire 1 ( out $end
$var wire 1 7 b $end
$var wire 1 ! a $end
$upscope $end
$scope module CU $end
$var wire 6 B instruction [5:0] $end
$var reg 6 C ALUOP [5:0] $end
$var reg 2 D ALUSrc [1:0] $end
$var reg 1 7 Branch $end
$var reg 2 E MemRead [1:0] $end
$var reg 2 F MemWrite [1:0] $end
$var reg 1 4 MemtoReg $end
$var reg 1 3 RegDst $end
$var reg 1 2 RegWrite $end
$var reg 1 , jump $end
$upscope $end
$scope module IM $end
$var wire 32 G pc [31:0] $end
$var reg 32 H out [31:0] $end
$upscope $end
$scope module PC $end
$var wire 1 ; clk $end
$var wire 1 < reset $end
$var wire 32 I d [31:0] $end
$var reg 32 J q [31:0] $end
$upscope $end
$scope module RF $end
$var wire 1 2 RegWrite $end
$var wire 1 ; clk $end
$var wire 32 K read_data1 [31:0] $end
$var wire 32 L read_data2 [31:0] $end
$var wire 5 M read_reg1 [4:0] $end
$var wire 5 N read_reg2 [4:0] $end
$var wire 5 O write_reg [4:0] $end
$var wire 32 P write_data [31:0] $end
$upscope $end
$scope module SE $end
$var wire 16 Q instruction_in [15:0] $end
$var wire 32 R instruction_out [31:0] $end
$upscope $end
$scope module SL2 $end
$var wire 32 S inmediate [31:0] $end
$var wire 32 T out [31:0] $end
$upscope $end
$scope module add_b $end
$var wire 32 U a [31:0] $end
$var wire 32 V b [31:0] $end
$var wire 32 W out [31:0] $end
$upscope $end
$scope module alu $end
$var wire 6 X alu_control_out [5:0] $end
$var wire 32 Y read_data1 [31:0] $end
$var wire 32 Z read_data2 [31:0] $end
$var reg 32 [ ALU_result [31:0] $end
$var reg 1 ! zero $end
$upscope $end
$scope module alu_mux $end
$var wire 32 \ a [31:0] $end
$var wire 32 ] b [31:0] $end
$var wire 2 ^ sel [1:0] $end
$var reg 32 _ y [31:0] $end
$upscope $end
$scope module j_sl $end
$var wire 26 ` inst_jump [25:0] $end
$var wire 32 a pc_4 [31:0] $end
$var wire 32 b out [31:0] $end
$upscope $end
$scope module jump_branch $end
$var wire 32 c a [31:0] $end
$var wire 1 , sel $end
$var wire 32 d out [31:0] $end
$var wire 32 e b [31:0] $end
$upscope $end
$scope module m_branch $end
$var wire 32 f a [31:0] $end
$var wire 32 g b [31:0] $end
$var wire 1 ( sel $end
$var wire 32 h out [31:0] $end
$upscope $end
$scope module rgm2_1 $end
$var wire 5 i a [4:0] $end
$var wire 5 j b [4:0] $end
$var wire 1 3 sel $end
$var reg 5 k y [4:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 k
b0 j
b0 i
b100 h
b100 g
b10100 f
b100 e
b10000 d
b10000 c
b10000 b
b100 a
b100 `
b1 _
b0 ^
b100 ]
b1 \
bx [
b1 Z
b1 Y
b10101 X
b10100 W
b10000 V
b100 U
b10000 T
b100 S
b100 R
b100 Q
bx P
b0 O
b0 N
b0 M
b1 L
b1 K
b0 J
b10000 I
b1010100000000000000000000000100 H
b0 G
b0 F
b0 E
b0 D
b10101 C
b10101 B
b100 A
b0 @
b10101 ?
b10101 >
b100 =
1<
1;
b10101 :
b0 9
bx 8
07
b0 6
b0 5
04
13
02
b10100 1
b10101 0
b100 /
b1 .
b1010100000000000000000000000100 -
1,
b10000 +
b100 *
b10000 )
0(
b0 '
b1 &
b1 %
b10000 $
b100 #
b0 "
x!
$end
#1
0<
0;
#2
0!
b101 8
b101 P
b101 [
b100 0
b100 ?
b100 X
12
b111111 :
b111111 >
b111111 C
0,
03
b1000000000010000 $
b1000000000010000 T
b1000000000010000 V
b101 .
b101 Z
b101 _
b100 "
b100 O
b100 k
b10100 )
b10100 I
b10100 d
b10000000000100 #
b10000000000100 R
b10000000000100 S
b10000000000100 ]
b10000000000100 Q
b101 %
b101 L
b101 \
b100 N
b100 &
b100 K
b100 Y
b11 M
b100 j
b100 i
b1100100001000000000010000 +
b1100100001000000000010000 b
b1100100001000000000010000 c
b11001000010000000000100 `
b0 B
b11001000010000000000100 -
b11001000010000000000100 H
b10100 *
b10100 e
b10100 h
b1000000000100100 1
b1000000000100100 W
b1000000000100100 f
b10100 /
b10100 A
b10100 U
b10100 a
b10100 g
b10000 '
b10000 @
b10000 G
b10000 J
1;
#3
0;
#4
b1 8
b1 P
b1 [
b1010000000010100 $
b1010000000010100 T
b1010000000010100 V
b101 0
b101 ?
b101 X
b110 .
b110 Z
b110 _
b101 "
b101 O
b101 k
b10100000000101 #
b10100000000101 R
b10100000000101 S
b10100000000101 ]
b10100000000101 Q
b101 =
b110 %
b110 L
b110 \
b101 N
b101 &
b101 K
b101 Y
b100 M
b101 j
b101 i
b10000101001010000000010100 +
b10000101001010000000010100 b
b10000101001010000000010100 c
b100001010010100000000101 `
b100001010010100000000101 -
b100001010010100000000101 H
b11000 )
b11000 I
b11000 d
b11000 *
b11000 e
b11000 h
b1010000000101100 1
b1010000000101100 W
b1010000000101100 f
b11000 /
b11000 A
b11000 U
b11000 a
b11000 g
b10100 '
b10100 @
b10100 G
b10100 J
1;
#5
0;
#6
b1 9
b1 D
b1 ^
b110 :
b110 >
b110 C
13
b11100 $
b11100 T
b11100 V
b110 0
b110 ?
b110 X
b0 "
b0 O
b0 k
b111 #
b111 R
b111 S
b111 ]
b111 Q
b111 =
b0 N
b1 &
b1 K
b1 Y
b0 M
b0 j
b0 i
b11100 +
b11100 b
b11100 c
b111 `
b110 B
b11000000000000000000000000111 -
b11000000000000000000000000111 H
b11100 )
b11100 I
b11100 d
b11100 *
b11100 e
b11100 h
b1000 8
b1000 P
b1000 [
b111000 1
b111000 W
b111000 f
b11100 /
b11100 A
b11100 U
b11100 a
b11100 g
b111 .
b111 Z
b111 _
b11000 '
b11000 @
b11000 G
b11000 J
b1 %
b1 L
b1 \
1;
#7
0;
#8
b111 0
b111 ?
b111 X
b111 :
b111 >
b111 C
b10100 $
b10100 T
b10100 V
b101 .
b101 Z
b101 _
b1 "
b1 O
b1 k
b101 #
b101 R
b101 S
b101 ]
b101 Q
b101 =
b1 N
b1 i
b1000000000000010100 +
b1000000000000010100 b
b1000000000000010100 c
b10000000000000101 `
b111 B
b11100000000010000000000000101 -
b11100000000010000000000000101 H
b100000 )
b100000 I
b100000 d
b100000 *
b100000 e
b100000 h
b110100 1
b110100 W
b110100 f
b100000 /
b100000 A
b100000 U
b100000 a
b100000 g
b0 8
b0 P
b0 [
b11100 '
b11100 @
b11100 G
b11100 J
b1000 &
b1000 K
b1000 Y
b10 %
b10 L
b10 \
1;
#9
0;
#10
b11111111111111111111111111111101 8
b11111111111111111111111111111101 P
b11111111111111111111111111111101 [
b1000 0
b1000 ?
b1000 X
b1000 :
b1000 >
b1000 C
b1100 $
b1100 T
b1100 V
b11 .
b11 Z
b11 _
b10 "
b10 O
b10 k
b11 #
b11 R
b11 S
b11 ]
b11 Q
b11 =
b10 N
b0 &
b0 K
b0 Y
b1 M
b10 i
b100010000000000000001100 +
b100010000000000000001100 b
b100010000000000000001100 c
b1000100000000000000011 `
b1000 B
b100000001000100000000000000011 -
b100000001000100000000000000011 H
b100100 )
b100100 I
b100100 d
b100100 *
b100100 e
b100100 h
b110000 1
b110000 W
b110000 f
b100100 /
b100100 A
b100100 U
b100100 a
b100100 g
b100000 '
b100000 @
b100000 G
b100000 J
b11 %
b11 L
b11 \
1;
#11
0;
#12
b1001 0
b1001 ?
b1001 X
b1001 :
b1001 >
b1001 C
b100000 $
b100000 T
b100000 V
b1000 .
b1000 Z
b1000 _
b11111111111111111111111111111101 8
b11111111111111111111111111111101 P
b11111111111111111111111111111101 [
b11 "
b11 O
b11 k
b1000 #
b1000 R
b1000 S
b1000 ]
b1000 Q
b1000 =
b11 N
b11111111111111111111111111111101 &
b11111111111111111111111111111101 K
b11111111111111111111111111111101 Y
b10 M
b11 i
b1000011000000000000100000 +
b1000011000000000000100000 b
b1000011000000000000100000 c
b10000110000000000001000 `
b1001 B
b100100010000110000000000001000 -
b100100010000110000000000001000 H
b101000 )
b101000 I
b101000 d
b101000 *
b101000 e
b101000 h
b1001000 1
b1001000 W
b1001000 f
b101000 /
b101000 A
b101000 U
b101000 a
b101000 g
b100100 '
b100100 @
b100100 G
b100100 J
b100 %
b100 L
b100 \
1;
#13
0;
#14
b0 8
b0 P
b0 [
b1101 0
b1101 ?
b1101 X
b1101 :
b1101 >
b1101 C
b10100 $
b10100 T
b10100 V
b101 .
b101 Z
b101 _
b100 "
b100 O
b100 k
b101 #
b101 R
b101 S
b101 ]
b101 Q
b101 =
b100 N
b11 M
b100 i
b1100100000000000000010100 +
b1100100000000000000010100 b
b1100100000000000000010100 c
b11001000000000000000101 `
b1101 B
b110100011001000000000000000101 -
b110100011001000000000000000101 H
b101100 )
b101100 I
b101100 d
b101100 *
b101100 e
b101100 h
b1000000 1
b1000000 W
b1000000 f
b101100 /
b101100 A
b101100 U
b101100 a
b101100 g
b101000 '
b101000 @
b101000 G
b101000 J
b101 %
b101 L
b101 \
1;
#15
0;
#16
b1000 0
b1000 ?
b1000 X
b0 9
b0 D
b0 ^
b111111 :
b111111 >
b111111 C
03
b100000 $
b100000 T
b100000 V
b1000 .
b1000 Z
b1000 _
b0 "
b0 O
b0 k
b1000 #
b1000 R
b1000 S
b1000 ]
b1000 Q
b1000 =
b0 N
b1000 &
b1000 K
b1000 Y
b0 M
b0 i
b100000 +
b100000 b
b100000 c
b1000 `
b0 B
b1000 -
b1000 H
b110000 )
b110000 I
b110000 d
b110000 *
b110000 e
b110000 h
b1010000 1
b1010000 W
b1010000 f
b110000 /
b110000 A
b110000 U
b110000 a
b110000 g
b101100 '
b101100 @
b101100 G
b101100 J
b1000 %
b1000 L
b1000 \
1;
#17
0;
#18
b1000 $
b1000 T
b1000 V
b10 0
b10 ?
b10 X
b10 #
b10 R
b10 S
b10 ]
b10 Q
b10 =
b1000 +
b1000 b
b1000 c
b10 `
b10 -
b10 H
b110100 )
b110100 I
b110100 d
b110100 *
b110100 e
b110100 h
b111100 1
b111100 W
b111100 f
b110100 /
b110100 A
b110100 U
b110100 a
b110100 g
b0 .
b0 Z
b0 _
b110000 '
b110000 @
b110000 G
b110000 J
b0 &
b0 K
b0 Y
b0 %
b0 L
b0 \
1;
#19
0;
#20
b100000000 $
b100000000 T
b100000000 V
b0 0
b0 ?
b0 X
b1000000 #
b1000000 R
b1000000 S
b1000000 ]
b1000000 Q
b0 =
b100000000 +
b100000000 b
b100000000 c
b1000000 `
b1000000 -
b1000000 H
b111000 )
b111000 I
b111000 d
b111000 *
b111000 e
b111000 h
b100111000 1
b100111000 W
b100111000 f
b111000 /
b111000 A
b111000 U
b111000 a
b111000 g
b110100 '
b110100 @
b110100 G
b110100 J
1;
#21
0;
